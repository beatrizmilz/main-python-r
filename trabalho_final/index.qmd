---
title: "Abastecimento público da Região Metropolitana de São Paulo"
subtitle: "Trabalho final para o curso Python para usuários de R, da Curso-R"
author: "Beatriz Milz"
date: "2023-01-01"
categories: ["Análise exploratória", "Estudos", "Quarto", "Python", "Pandas", "Seaborn"]
#image: "logo-featured.jpg"
toc: true
draft: false
jupyter: python3
lang: pt
---

## Introdução

Explorando dados sobre os mananciais que abastecem a Região Metropolitana de São Paulo

## Objetivos

-

## Setup

Este trabalho foi desenvolvido em um computador com sistema Mac OS, com a versão do Python 3.9.13, utilizando o VS Code, o Quarto e a extensão do Quarto para o VS Code.

```{python}
from platform import python_version

python_version()
```

## Preparando o ambiente

Antes de iniciar a explorar os dados, foi preciso preparar o ambiente. Primeiro criei um virtual environment para a instalação dos pacotes em Python utilizando o seguinte código no terminal:

```{python}
#| eval: false
python3 -m venv env
```

Para utilizar o virtual environment criado, utilizei o seguinte código no terminal:

```{python}
#| eval: false
source env/bin/activate
```


Foi necessário também atualizar o pip (usado para instalar as bibliotecas), e instalar o jupyter e os pacotes:

```{python}
#| eval: false

# Para instalar o jupyter
pip install jupyter


# atualizar o pip
pip install --upgrade pip


# Para instalar as bibliotecas pandas e seaborn:
pip install pandas
pip install seaborn
```

## Carregar bibliotecas


```{python}
import numpy as np
import pandas as pd
import seaborn as sns
```


## Importar dados

```{python}

url_mananciais = 'https://raw.githubusercontent.com/beatrizmilz/mananciais/master/inst/extdata/mananciais.csv'

mananciais = pd.read_csv(url_mananciais,  sep = ";")
```


## Limpar/organizar os dados

```{python}
mananciais.info()
```





Quais são as colunas disponíveis?

```{python}

# funcao para converter em numero

def converter_em_numero(serie):
   x = pd.to_numeric(serie.str.replace(',', '.')) 
   return(x)


# exemplo de uso!
# converter_em_numero(mananciais['volume_porcentagem'])

```

```{python}

mananciais_arrumado = mananciais.assign(
    data = pd.to_datetime(mananciais['data']),
    volume_porcentagem = lambda x: converter_em_numero(x['volume_porcentagem']),
    volume_variacao = lambda x: converter_em_numero(x['volume_variacao']),
    volume_operacional = lambda x: converter_em_numero(x['volume_operacional']),
    pluviometria_dia = lambda x: converter_em_numero(x['pluviometria_dia']),
    pluviometria_mensal = lambda x: converter_em_numero(x['pluviometria_mensal']),
    pluviometria_hist = lambda x: converter_em_numero(x['pluviometria_hist'])
    )
```


```{python}
mananciais_arrumado.info()
```

```{python}
mananciais_arrumado['data_mes'] = pd.DatetimeIndex(mananciais_arrumado['data']).month

mananciais_arrumado['data_ano'] = pd.DatetimeIndex(mananciais_arrumado['data']).year
```

```{python}
mananciais_arrumado.info()
```

## Análise exploratória

```{python}
mananciais.
```


```{python}
mananciais['sistema'].unique()
```

```{python}
mananciais_arrumado['data'].min()
mananciais_arrumado['data'].max()
```


```{python}
mananciais_arrumado.query("data == data.max()").sort_values('volume_operacional',  ascending = False).filter(["sistema", "volume_porcentagem", "volume_operacional"])
```


- Agrupar por ano e sistema

```{python}

mananciais_sumarizado_mes_ano = (mananciais_arrumado.
groupby(["sistema", "data_ano"], as_index = False).
agg(media_medida_porcentagem = ("volume_porcentagem", "mean")))

```

```{python}
dados_cantareira = mananciais_sumarizado_mes_ano.query("sistema == 'Cantareira'")



# sns.lineplot(dados_cantareira, x = 'data_ano',  y = 'media_medida_porcentagem' )
```
