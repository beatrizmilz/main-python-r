---
title: "Abastecimento público da Região Metropolitana de São Paulo"
subtitle: "Trabalho final para o curso Python para usuários de R, da Curso-R"
author: "Beatriz Milz"
date: "2023-01-01"
categories: ["Análise exploratória", "Estudos", "Quarto", "Python", "Pandas", "Seaborn"]
#image: "logo-featured.jpg"
toc: true
draft: false
jupyter: python3
lang: pt
code-fold: show
---


## Introdução

Explorando dados sobre os mananciais que abastecem a Região Metropolitana de São Paulo. Estes dados são produzidos pela [SABESP](https://mananciais.sabesp.com.br/Situacao), e aqui utilizei os dados do pacote em R [Mananciais](https://beatrizmilz.github.io/mananciais/), que disponibiliza a base dos dados atualizada diariamente em CSV.

## Objetivos

Responder as seguintes perguntas:

- Quais são os sistemas presentes na base Mananciais? 

- Qual é o sistema com a menor volume armazenado atualmente?

- Como o volume armazenado variou ao longo de 2022?

## Setup

```{python}

# descobrindo a versao do python
from platform import python_version
versao_python = python_version()

# escrevendo um parágrafo que apresente o valor guardado na variável versao_python

from IPython.display import display, Markdown

display(Markdown("""
Este trabalho foi desenvolvido em um computador com sistema Mac OS,
com a versão do Python {versao_python}, utilizando a IDE VS Code,
o software Quarto e a extensão do Quarto para o VS Code.
""".format(versao_python = versao_python)))

```


## Preparando o ambiente

Antes de iniciar a explorar os dados, foi preciso preparar o ambiente. Primeiro criei um virtual environment para a instalação dos pacotes em Python utilizando o seguinte código no terminal:

```{python}
#| eval: false
# criando ambiente virtual chamado env
python3 -m venv env
```

Para utilizar o virtual environment criado, utilizei o seguinte código no terminal:

```{python}
#| eval: false

# ativando o ambiente virtual criado
source env/bin/activate
```


Foi necessário também atualizar o pip (usado para instalar as bibliotecas), e instalar o jupyter e os pacotes:

```{python}
#| eval: false

# Para instalar o jupyter
pip install jupyter


# atualizar o pip
pip install --upgrade pip


# Para instalar as bibliotecas pandas e seaborn:
pip install pandas
pip install seaborn
```

## Carregar bibliotecas


```{python}
# importar as bibliotecas usadas
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
```


## Importar dados

```{python}
# salvando o link onde a base está disponível
url_mananciais = 'https://raw.githubusercontent.com/beatrizmilz/mananciais/master/inst/extdata/mananciais.csv'

# lendo o CSV, o separador é ;
mananciais = pd.read_csv(url_mananciais,  sep = ";")
```


## Limpar/organizar os dados

Quais são as colunas disponíveis?

```{python}
# descobrindo as colunas e seus tipos
mananciais.info()
```

```{python}
# funcao para converter em numero
def converter_em_numero(serie):
   x = pd.to_numeric(serie.str.replace(',', '.')) 
   return(x)


# exemplo de uso!
# converter_em_numero(mananciais['volume_porcentagem'])
```

```{python}
mananciais_arrumado = mananciais.assign(
    # convertendo a coluna data em tipo datetime
    data = pd.to_datetime(mananciais['data']),
    # daqui em diante: convertendo os valores das colunas em número
    volume_porcentagem = lambda x: converter_em_numero(x['volume_porcentagem']),
    volume_variacao = lambda x: converter_em_numero(x['volume_variacao']),
    volume_operacional = lambda x: converter_em_numero(x['volume_operacional']),
    pluviometria_dia = lambda x: converter_em_numero(x['pluviometria_dia']),
    pluviometria_mensal = lambda x: converter_em_numero(x['pluviometria_mensal']),
    pluviometria_hist = lambda x: converter_em_numero(x['pluviometria_hist'])
)
```


```{python}
# criando a coluna do mês
mananciais_arrumado['data_mes'] = pd.DatetimeIndex(mananciais_arrumado['data']).month

# criando a coluna do ano
mananciais_arrumado['data_ano'] = pd.DatetimeIndex(mananciais_arrumado['data']).year

# cria a coluna do mes/ano
mananciais_arrumado['data_mes_ano'] = mananciais_arrumado['data'].apply(lambda x : x.replace(day=1))
```



```{python}
# conferindo as colunas e seus tipos
mananciais_arrumado.info()
```

## Análise exploratória

### Quais são os sistemas presentes na base Mananciais? 

```{python}
array_mananciais = mananciais_arrumado['sistema'].unique()

lista_mananciais = array_mananciais.tolist()

texto_mananciais = ", ".join(lista_mananciais[:-1])

ultimo_sistema = lista_mananciais[-1]

display(Markdown("""
Os sistemas presentes na base são: {texto_mananciais} e {ultimo_sistema}.
""".format(texto_mananciais = texto_mananciais, ultimo_sistema = ultimo_sistema)))

```


### Qual é o sistema com a menor volume armazenado atualmente?

```{python}
#| warning: false

# filtrando os dados com a data mais
sistemas_atualmente = mananciais_arrumado.query("data == data.max()")

# deixando a tabela mais apresentável
# arredondando a coluna volume operacional
sistemas_atualmente["Volume operacional"] = sistemas_atualmente["volume_operacional"].round(1)

# criando uma função para adicionar a porcentagem
def adicionar_porcentagem(x):
    return f"{x} %"

# aplicando a função de adicionar porcentagem
sistemas_atualmente["Volume"] = sistemas_atualmente["volume_porcentagem"].apply(adicionar_porcentagem)

# renomeando coluna
sistemas_atualmente["Sistema"] = sistemas_atualmente["sistema"]

# selecionando as colunas desejadas
tabela_sistemas = sistemas_atualmente.filter(["Sistema", "Volume", "Volume operacional"])
```


A seguir estão apresentados os sistemas ordenados por  volume operacional (quantidade absoluta):
```{python}
# ordenando de forma crescente segundo o Volume operacional
tabela_sistemas.sort_values("Volume operacional", ascending=True)
```


E os sistemas ordenados por volume percentual (quantidade relativa):
```{python}
# ordenando de forma crescente segundo o volume percentual
tabela_sistemas.sort_values("Volume", ascending=True)
```


### Como o volume armazenado variou ao longo de 2022?


```{python}
mananciais_arrumado
```

- Agrupar por ano e sistema

```{python}
mananciais_sumarizado = (
    mananciais_arrumado.
    groupby(["sistema", "data_mes_ano"], as_index = False).
    agg(media_porcentagem = ("volume_porcentagem", "mean"))
    )
mananciais_sumarizado

mananciais_sumarizado.info()
```

```{python}
dados_cantareira = mananciais_sumarizado.query("sistema == 'Cantareira'").reset_index()

dados_cantareira
mananciais_arrumado
```

```{python}
sns.lineplot(data = mananciais_arrumado, x = "data", y = "volume_porcentagem")
# plt.axline([0,0], slope = 0, color = "red")
mananciais_arrumado
```